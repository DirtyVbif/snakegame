"use strict";
class MUCanvas
{
    /**
     * @type {HTMLCanvasElement}
     */
    #canvas;

    /**
     * @param {HTMLCanvasElement} canvas
     */
    constructor (canvas)
    {
        this.#canvas = canvas;
    }
}
class MUCore
{
    /**
     * Default configuration parameters
     */
    static get c ()
    {
        return {
            id: {
                canvas: 'board-canvas'
            }
        };
    }

    /**
     * Game handler instance
     *
     * @type {MUCoreGame}
     */
    static #game;

    /**
     * @returns {MUCoreGame}
     */
    static get game ()
    {
        if (!this.#game) {
            this.#game = new MUCoreGame();
        }

        return this.#game;
    }

    /**
     * Canvas interface handler instance
     *
     * @type {MUCanvas}
     */
    static #canvas;

    /**
     * @returns {MUCanvas}
     */
    static get canvas ()
    {
        if (!this.#canvas) {
            this.#canvas = new MUCanvas(document.getElementById(this.c.id.canvas));
        }

        return this.#canvas;
    }

    static initialize ()
    {
        // TODO: initialize main canvas and controls handlers
    }
}
class MUDoc
{
    /**
     * @type {function[]}
     */
    static #on_ready = [];

    static #is_ready = false;

    static #initialized = false;

    /**
     * @param {function} callback
     */
    static ready(callback)
    {
        this.#initialize();
        if (!this.#is_ready) {
            this.#on_ready.push(callback);
        } else {
            callback();
        }
    }

    static #initialize()
    {
        if (!this.#initialized) {
            this.#initialized = true;
            window.onload     = this.complete.bind(this);
        }
    }

    static complete()
    {
        if (!this.#is_ready) {
            this.#is_ready = true;
            this.#initialize();
            this.#on_ready.forEach(callback => callback());
            this.#on_ready = undefined;
        }
    }
}
class MUCoreGame
{}
MUDoc.ready(
    () => MUCore.initialize()
)
